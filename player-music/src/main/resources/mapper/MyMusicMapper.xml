<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.player.music.mapper.MyMusicMapper">

    <sql id="musicSql">
      select
      id,
      album_id,
      song_name,
      author_name,
      album_name,
      version,
      `language`,
      publish_date,
      wide_audio_id,
      is_publish,
      big_pack_id,
      final_id,
      audio_id,
      author_id,
      similar_audio_id,
      is_hot,
      album_audio_id,
      audio_group_id,
      cover,
      play_url,
      local_play_url,
      source_name,
      source_url,
      create_time,
      update_time,
      label,
      lyrics
      from music
    </sql>

    <select id="getKeywordMusic" resultType="MyMusicEntity">
        <include refid="musicSql"></include>
        order by is_hot desc limit 0,1
    </select>

    <select id="getMusicClassify" resultType="MusicClassifyEntity">
        select * from music_classify_relation where disabled = 0 and permission >= 0 order by classify_rank desc
    </select>

    <select id="getMusicListByClassifyId" resultType="MyMusicEntity">
        SELECT
            t3.*,
            (CASE WHEN t4.music_id IS NOT NULL THEN 1 ELSE 0 END) AS is_favorite
        FROM
            (
                SELECT
                    t2.*
                FROM music_classify t1
                LEFT JOIN music t2
                ON t1.music_id = t2.id
                WHERE t1.classify_id =#{classifyId} ORDER BY t1.audio_rank DESC limit #{start},#{pageSize}
            ) t3
        LEFT JOIN music_favorite t4
        ON t3.id = t4.music_id AND t4.user_id = #{userId}
    </select>

    <select id="getMusicTotalByClassifyId" resultType="Long">
        select count(*) as total from music_classify where classify_id = #{classifyId}
    </select>

    <select id="isMusicFavorite" resultType="Long">
        select count(id) from music_favorite where music_id = #{musicId} and user_id = #{userId}
    </select>

    <select id="getSingerList" resultType="MusicAuthorEntity">
        select
        t1.id,
        t1.author_id,
        t1.author_name,
        t1.language,
        t1.is_publish,
        t1.avatar,
        t1.type,
        t1.country,
        t1.birthday,
        t1.identity,
        t1.rank,
        t1.create_time,
        t1.update_time,
        COUNT(t2.author_name) as total
        from
        (select * from music_authors
        <if test="category != '' and category != null">
            where language = #{category}
        </if>
        order by `rank` desc limit #{start},#{pageSize}
        )t1
        LEFT JOIN music t2 on t1.author_name = t2.author_name
        GROUP BY t2.author_name,t1.id
    </select>

    <select id="getSingerTotal" resultType="Long">
        select count(*) as total from music_authors where avatar is not null
    </select>


    <select id="getMusiPlayMenu" resultType="MyMusiPlayMenuEntity">
        select t2.*,t1.total from
	        (select count(id) as total ,menu_id from music_play_list where menu_id in (SELECT id from music_play_menu where user_id = #{userId}) group by menu_id) t1
        LEFT JOIN music_play_menu t2 on t1.menu_id = t2.id
    </select>

    <select id="getMySinger" resultType="MySingerEntity">
        select t4.*,COUNT(t5.author_id) as total from
            (select t3.* from
                (select t1.* from music_my_singer t1 WHERE 1=1 OR user_id = #{userId} LIMIT #{start},#{pageSize}) t2
                    LEFT JOIN music_authors t3 on t2.author_id = t3.author_id) t4
        LEFT JOIN music t5 on t5.author_id = t4.author_id
        GROUP BY t5.author_id,t4.id
    </select>

    <select id="getMySingerCount" resultType="Long">
       SELECT count(*) as total FROM music_my_singer where user_id = #{userId}
    </select>

    <select id="getMusicRecord" resultType="MyMusicEntity">
        SELECT
            *
        FROM
            (
            SELECT
                t5.*,
                t6.times
            FROM
                (
                SELECT
                    t1.*
                FROM
                    ( SELECT * FROM music_record WHERE 1=1 or user_id = #{userId} ) t1
                    INNER JOIN ( SELECT music_id, MAX( create_time ) AS max_date FROM ( SELECT * FROM music_record WHERE  1=1 or user_id = #{userId} ) t2 GROUP BY music_id ) t3 ON t1.music_id = t3.music_id
                    AND t1.create_time = t3.max_date
                ORDER BY
                    t1.create_time DESC
                ) t4
                INNER JOIN music t5 ON t4.music_id = t5.id
                INNER JOIN ( SELECT COUNT( music_id ) AS times, music_id FROM music_record GROUP BY music_id ) t6 ON t6.music_id = t4.music_id
            ORDER BY
                t4.create_time DESC
            ) t7
            LIMIT #{start},#{pageSize}
    </select>

    <select id="getMusicRecordCount" resultType="Long">
        select count(*) as total from (SELECT DISTINCT id,music_id,user_id,create_time,update_time FROM music_record WHERE user_id = #{userId}) t1
    </select>

    <insert id="insertMusicRecord">
        insert into music_record (music_id,user_id,create_time,update_time) VALUES (#{musicId},#{userId},now(),now())
    </insert>

    <insert id="insertMusicFavorite">
        insert into music_favorite (music_id,user_id,create_time,update_time) VALUES (#{musicId},#{userId},now(),now())
    </insert>

    <delete id="deleteMusicFavorite">
        delete from music_favorite where user_id = #{userId} and music_id = #{musicId}
    </delete>

    <select id="queryMusicFavorite" resultType="MyMusicEntity">
        SELECT t2.* FROM music_favorite t1 LEFT JOIN music t2 on t1.music_id = t2.id where t1.user_id = #{userId}  LIMIT #{start}, #{pageSize}
    </select>

    <select id="queryMusicFavoriteCount" resultType="Long">
        select count(*) as total from (SELECT DISTINCT id,music_id,user_id,create_time,update_time FROM music_favorite WHERE user_id = #{userId}) t1
    </select>

    <select id="searchMusic" resultType="MyMusicEntity">
        SELECT t1.*,(CASE WHEN t2.music_id IS NOT NULL THEN 1 ELSE 0 END) AS isFavorite FROM music t1 LEFT JOIN music_favorite t2 on t1.id = t2.music_id AND T2.user_id = #{userId}
        where t1.song_name like concat('%',#{keyword},'%') or t1.author_name like concat('%',#{keyword},'%') or t1.album_name like concat('%',#{keyword},'%') LIMIT #{start}, #{pageSize}
    </select>

    <select id="getSingerCategory" resultType="MyMusicSingerCategoryEntity">
        select language as category from music_authors where language is not null and language != '' GROUP BY language
    </select>

</mapper>

